name: Master Branch Workflow

permissions:
  contents: write  # For git push

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run tests
        run: dotnet test --no-build --verbosity normal

      - name: Get latest version
        id: get_version
        run: |
          VERSION=$(grep -oP '(?<=<Version>)(.*?)(?=</Version>)' src/BookStore.Api/BookStore.Api.csproj)
          if [ -z "$VERSION" ]; then
            echo "Error: Version tag not found in project file"
            exit 1
          fi
          echo "Current version: $VERSION"
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Determine new version
        id: bump_version
        run: |
          CURRENT_VERSION="${{ env.CURRENT_VERSION }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Determine if this is a breaking change, feature, or patch
          # Read commit messages to decide
          if git log -1 --pretty=%B | grep -q '\[major\]'; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif git log -1 --pretty=%B | grep -q '\[minor\]'; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch origin master

      - name: Update project file and commit
        run: |
          # Update version in project file
          sed -i "s/<Version>.*<\/Version>/<Version>${{ env.NEW_VERSION }}<\/Version>/" src/BookStore.Api/BookStore.Api.csproj
          
          # Stage, commit, and push changes
          git add src/BookStore.Api/BookStore.Api.csproj
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git pull --rebase origin master
          git push origin master

      - name: Run deployment
        if: success()
        run: |
          response=$(curl -w "\n%{http_code}" -X POST "${{ vars.WEBHOOK_URL }}/api/github" \
          -H "Content-Type: application/json" \
          -d '{
            "branch": "${{ github.ref_name }}",
            "appId": "${{ vars.APPLICATION_ID }}"
          }')
          status_code=$(echo "$response" | tail -n1)
          if [ "$status_code" -ge 400 ]; then
            echo "Deployment webhook failed with status: $status_code"
            exit 1
          fi