# .github/workflows/shared-version-management.yml
name: Get next version

on:
  workflow_call:
    inputs:
      project-path:
        required: true
        type: string
    outputs:
      new-version:
        description: "The calculated new version"
        value: ${{ jobs.version-management.outputs.new_version }}
      current-version:
        description: "The current version"
        value: ${{ jobs.version-management.outputs.current_version }}

jobs:
  version-management:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      current_version: ${{ steps.version.outputs.current_version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug file existence
        run: |
          pwd
          ls -la
          echo "Looking for file at: ${{ inputs.project-path }}"
          if [ -f "${{ inputs.project-path }}" ]; then
            echo "File exists"
            cat "${{ inputs.project-path }}"
          else
            echo "File does not exist"
            find . -name "*.csproj" -type f
          fi

      - name: Extract current version
        id: version
        shell: bash
        run: |
          if [ ! -f "${{ inputs.project-path }}" ]; then
            echo "::error::Project file not found at ${{ inputs.project-path }}"
            exit 1
          fi
          
          VERSION=$(grep -oP '(?<=<Version>)(.*?)(?=</Version>)' "${{ inputs.project-path }}" || echo "1.0.0")
          if [ -z "$VERSION" ]; then
            echo "No version found in project file, defaulting to 1.0.0"
            VERSION="1.0.0"
          fi
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Current version: $VERSION"

      - name: Calculate next version
        id: bump_version
        shell: bash
        run: |
          CURRENT_VERSION="${{ env.CURRENT_VERSION }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          if git log "$(git describe --tags --abbrev=0 2>/dev/null || echo HEAD^)"..HEAD --pretty=format:"%s" | grep -qiE '\[major\]'; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif git log "$(git describe --tags --abbrev=0 2>/dev/null || echo HEAD^)"..HEAD --pretty=format:"%s" | grep -qiE '\[minor\]'; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version in csproj
        shell: bash
        run: |
          sed -i "s|<Version>.*</Version>|<Version>${{ env.NEW_VERSION }}</Version>|" "${{ inputs.project-path }}"
