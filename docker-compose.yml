services:
  api:
    # Build the image using the Dockerfile in the current directory
    build: .
    
    ports:
      # Map HTTPS port from host to container
      - "${HTTPS_PORT}:${HTTPS_PORT}"
    
    environment:
      # Set ASP.NET Core environment (defaults to Development)
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      # Configure Kestrel to listen on HTTPS port
      - ASPNETCORE_URLS=https://+:${HTTPS_PORT}
      # SSL certificate configuration
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${MYDOTNETCERT_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/my-dotnet-cert.pfx
      # Database connection string from environment variable
      - ConnectionStrings__DefaultConnection=${BOOKSTORE_CONNECTIONSTRINGS_DEFAULTCONNECTION}
    
    volumes:
      # SSL Certificate Configuration:
      # - Source: ${MYDOTNETCERT_PATH} (host machine path, e.g. ${HOME}/dev/certs/my-dotnet-cert)
      # - Target: /https (container path where certificate will be accessible)
      # - Mode: ro (read-only access for security)
      # 
      # The certificate file (my-dotnet-cert.pfx) must exist in the source directory
      # Example full path on host: /Users/username/dev/certs/my-dotnet-cert/my-dotnet-cert.pfx
      # Example full path in container: /https/my-dotnet-cert.pfx
      - ${MYDOTNETCERT_PATH}:/https:ro
    
    networks:
      # Connect to pre-existing network named 'bookstore-network'
      - bookstore-network

networks:
  # Use an existing network (must be created before running docker compose)
  bookstore-network:
    external: true
